Phase 2 of project:
Project Solution:
Task1:(page 6)
Background of your project.

Task 2:
What is Sentiment Analysis?
Why do we need Sentiment Analysis?
Twitter analytics with R.

Task 3:(page 7)
Problem Definition

part1: about data, packages

Part2: the algorithm will be used to perform analysis

Task 4:(page8)
Implementation Prerequisites:
1. Accessing all API Key, API Secret, Access Token Key, Access Token Secret
document the steps(max10 steps) with Snap of above said information on website page.

2. Packages for twitter analysis:
write all (10)packages purpose(each max in 3 sentences)

3. 2 .csv files of positive and negetive words, download and save in your project folder. you have create one more for neutral words.


Task 5(page 13):
Solution Statement:
Sentiment Analysis:
Naive bayes Classification:

Task 6(page 14):
Methodology:
Part1:

1. Extracting and Analyzing Tweets:
We can extract tweets containing a given # 'hashtag' or @ 'address' words or tems from a user's account or public tweets. Follow the codes below for creating the API keys:
i. Setting the Authorization for Extracting Tweets:
a. Run the following code in R-Studio to set the authorization for extracting tweets:
api_key<-"xxxxxxxxxxxx"
api_secret<-"xxxxxxxxxx"
access_token<-"xxxxxxxxx"
access_token_secret<-"xxxxxxxxxxx"

b. Set up connection between the Twitter app and R:
setup_twitter_oauth(pass all above 4 parameters)

Output:
----------
capture the output snap and paste just below the code.

ii. Required Libraries:
> install.packages("xxx")
**10 lines for installation
> library("xxx")
**10 lines for attaching packages

iii. Importing files:
We have to now import files containing the dictionary of positive and negetive words. we have already two files, onefor positive and another for negetive sentiments can be imported using the below code:

> posText<-read.csv(filename,header=FALSE,stringsAsFactors=FALSE)
str(posText)

** search for V1 feature, if there just refer this column/feature to the posText object.
> posText<-posText$V1
** split the words and unlist
> posText<-unlist(lapply(posText, function(x){ str_split(x,\n")}))

Repeat the same for negetive file and store data into negText object.

** add some more words into posText and negText
pos.word=c(posText,"upgrade")
neg.words=c(negText,"wtf","wait","waiting","epicfail","mechanical")

==========================================================








